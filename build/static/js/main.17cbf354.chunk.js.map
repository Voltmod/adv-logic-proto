{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["OPERATIONS","id","name","autocomplete","AUTOCOMPLETION","filter","operation","App","useState","expression","setExpression","error","value","result","setResult","dynamicVariables","setDynamicVariables","dvInput","setDvInput","expressionInput","useRef","useEffect","map","item","defaultValue","code","parse","join","compile","evaluate","err","message","testInput","RegExp","test","onAddition","tag","trim","onSelectPredefined","predefinedArray","e","suggestedValue","find","String","target","current","input","focus","className","onChange","type","placeholder","prevState","onClick","Date","now","disabled","length","allowNew","minQueryLength","onDelete","i","newExpression","slice","splice","placeholderText","ref","suggestions","tags","tagComponent","removeButtonText","onInput","inputQuery","query","includes","number","replace","setTimeout","clearInput","index","JSON","stringify","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iSAKMA,G,MAAa,CACjB,CAAEC,GAAI,EAAGC,KAAM,IAAKC,cAAc,GAClC,CAAEF,GAAI,EAAGC,KAAM,IAAKC,cAAc,GAClC,CAAEF,GAAI,EAAGC,KAAM,IAAKC,cAAc,GAClC,CAAEF,GAAI,EAAGC,KAAM,IAAKC,cAAc,GAClC,CAAEF,GAAI,EAAGC,KAAM,IAAKC,cAAc,GAClC,CAAEF,GAAI,EAAGC,KAAM,IAAKC,cAAc,GAClC,CAAEF,GAAI,EAAGC,KAAM,IAAKC,cAAc,GAClC,CAAEF,GAAI,EAAGC,KAAM,WAGXE,EAAiBJ,EAAWK,QAAO,SAAAC,GAAS,OAAIA,EAAUH,gBA8KjDI,EA5KH,WAAO,IAAD,EACoBC,mBAAS,IAD7B,mBACTC,EADS,KACGC,EADH,OAEYF,mBAAS,CAAEG,MAAO,KAAMC,MAAO,OAF3C,mBAETC,EAFS,KAEDC,EAFC,OAGgCN,mBAAS,IAHzC,mBAGTO,EAHS,KAGSC,EAHT,OAIcR,mBAAS,CAAEN,KAAM,GAAIU,MAAO,KAJ1C,mBAITK,EAJS,KAIAC,EAJA,KAKVC,EAAkBC,mBAExBC,qBAAU,WACR,IAAMR,EAASJ,EAAWa,KAAI,SAAAC,GAAI,OAAIA,EAAKC,cAAgBD,EAAKrB,QAChE,IACE,IACMuB,EADOC,YAAMb,EAAOc,KAAK,KACbC,UAClBd,EAAU,CAAEF,MAAOa,EAAKI,WAAYlB,MAAO,OAC3C,MAAOmB,GACPhB,EAAU,CAAEF,MAAO,KAAMD,MAAOmB,EAAIC,aAErC,CAACtB,IAEJ,IAAMuB,EAAY,SAAApB,GAAK,OAAIqB,OAAO,sBAAsBC,KAAKtB,IAQvDuB,EAAa,SAACC,GAClB,IAAMxB,EAAQwB,EAAIlC,KAAKmC,OAEnBD,EAAInC,IAAM+B,EAAUpB,GACtBF,EAAc,GAAD,mBAAKD,GAAL,aAAC,eAAqB2B,GAAtB,IAA2BlC,KAAMU,OAE9CE,EAAU,CAAEF,MAAO,KAAMD,MAAM,IAAD,OAAMC,EAAN,8DAI5B0B,EAAqB,SAACC,GAAD,OAAqB,SAACC,GAAO,IAAD,UAC/CC,EAAiBF,EAAgBG,MAAK,SAAAnB,GAAI,OAAIoB,OAAOpB,EAAKtB,MAAQ0C,OAAOH,EAAEI,OAAOhC,UACpF6B,GACFN,EAAWM,GAEE,OAAftB,QAAe,IAAfA,GAAA,UAAAA,EAAiB0B,eAAjB,mBAA0BC,aAA1B,mBAAiCD,eAAjC,mBAA0CC,aAA1C,mBAAiDD,eAAjD,SAA0DE,UA8B5D,OACE,sBAAKC,UAAU,WAAf,UACE,yBACEpC,MAAM,aACNV,KAAK,YACL+C,SAAU,aAHZ,UAKE,wBAAQrC,MAAM,aAAd,wBACA,wBAAQA,MAAM,SAAd,uBAEF,uBAEA,gCACE,uBAAOA,MAAOK,EAAQf,KAAMgD,KAAK,OAAOC,YAAY,OAAOF,SAAU,SAACT,GACpEtB,GAAW,SAACkC,GAAD,mBAAC,eACPA,GADM,IAETlD,KAAMsC,EAAEI,OAAOhC,cAGnB,uBAAOA,MAAOK,EAAQL,MAAOsC,KAAK,OAAOC,YAAY,QAAQF,SAAU,SAACT,GACtEtB,GAAW,SAACkC,GAAD,mBAAC,eACPA,GADM,IAETxC,MAAO4B,EAAEI,OAAOhC,cAGpB,wBAAQyC,QAAS,WACfrC,GAAoB,SAACoC,GAAD,4BACdA,GADc,CACH,CAACnD,GAAIqD,KAAKC,MAAOrD,KAAMe,EAAQf,KAAMsB,aAAcP,EAAQL,YAE5EM,EAAW,CAAChB,KAAM,GAAIU,MAAO,MAJ/B,oBAOF,uBAEA,gCACE,yBACEA,MAAM,UACNV,KAAK,aACL+C,SAAUX,EAAmBtC,GAH/B,UAKE,wBAAQY,MAAM,UAAU4C,UAAQ,EAAhC,wBAEExD,EAAWsB,KAAI,SAACC,GAAD,OACb,wBAAsBX,MAAOW,EAAKtB,GAAlC,SAAuCsB,EAAKrB,MAA/BqB,EAAKtB,UAKM,IAA5Bc,EAAiB0C,QACf,yBACE7C,MAAM,UACNV,KAAK,YACL+C,SAAUX,EAAmBvB,GAH/B,UAKE,wBAAQH,MAAM,UAAU4C,UAAQ,EAAhC,uBAEEzC,EAAiBO,KAAI,SAACC,GAAD,OACnB,wBAAsBX,MAAOW,EAAKtB,GAAlC,SAAuCsB,EAAKrB,MAA/BqB,EAAKtB,aAO9B,uBAEA,cAAC,IAAD,CACEyD,UAAQ,EACRC,eAAgB,EAChBxB,WAAYA,EACZyB,SAzHW,SAACC,GAChB,IAAMC,EAAgBrD,EAAWsD,MAAM,GACvCD,EAAcE,OAAOH,EAAG,GACxBnD,EAAcoD,IAuHVG,gBAAgB,uBAChBC,IAAK/C,EACLgD,YAAW,UAAMnE,EAAN,YAAqBe,IAChCqD,KAAM3D,EACN4D,aAtG2B,SAAC,GAAyC,IAAvCjC,EAAsC,EAAtCA,IAAsC,EAAjCkC,iBAAiC,EAAfV,SACzD,OACE,wBAAQV,KAAK,SAASF,UAAU,2BAAhC,SACGZ,EAAIlC,QAoGLqE,QA/FU,SAACC,GACf,IAAMC,EAAQD,EAAWnC,OACnB/B,EAAYF,EAAesC,MAAK,SAAAnB,GAAI,OAAIkD,EAAMC,SAASnD,EAAKrB,SAClE,GAAII,EAAW,CACb,IAAMqE,EAASF,EAAMG,QAAQtE,EAAUJ,KAAM,IAAImC,OAC7C/B,EAAUJ,KAAKuD,SAAWgB,EAAMhB,OAClC/C,EAAc,GAAD,mBAAKD,GAAL,CAAiBH,KACrB0B,EAAU2C,GACnBjE,EAAc,GAAD,mBAAKD,GAAL,CAAiB,CAAEP,KAAMyE,GAAUrE,KAEhDQ,EAAU,CAAEF,MAAO,KAAMD,MAAM,IAAD,OAAMgE,EAAN,6DAGhCE,YAAW,WACT1D,EAAgB0B,QAAQiC,eACvB,OAkFH,uBAEA,gCAEqB,OAAjBjE,EAAOF,OAAkB,wCAGR,OAAjBE,EAAOD,OAAkB,yCAE1BC,EAAOF,OAASE,EAAOD,SAE1B,uBAEA,gCACE,mDADF,IAC4B,uBAC1B,6BACGH,EAAWa,KAAI,SAACC,EAAMwD,GAAP,OAAiB,6BAAiC,+BAAOC,KAAKC,UAAU1D,MAAvD,UAAYA,EAAKrB,KAAO6E,gBC3KpDG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.17cbf354.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\nimport ReactTags from 'react-tag-autocomplete'\nimport { parse } from 'mathjs'\nimport './App.css'\n\nconst OPERATIONS = [\n  { id: 1, name: '(', autocomplete: true },\n  { id: 2, name: ')', autocomplete: true },\n  { id: 3, name: '+', autocomplete: true },\n  { id: 4, name: '-', autocomplete: true },\n  { id: 5, name: '*', autocomplete: true },\n  { id: 6, name: '/', autocomplete: true },\n  { id: 7, name: '^', autocomplete: true },\n  { id: 8, name: 'sqrt(' }\n]\n\nconst AUTOCOMPLETION = OPERATIONS.filter(operation => operation.autocomplete)\n\nconst App = () => {\n  const [expression, setExpression] = useState([])\n  const [result, setResult] = useState({ error: null, value: null })\n  const [dynamicVariables, setDynamicVariables] = useState([])\n  const [dvInput, setDvInput] = useState({ name: '', value: '' })\n  const expressionInput = useRef()\n\n  useEffect(() => {\n    const result = expression.map(item => item.defaultValue || item.name)\n    try {\n      const node = parse(result.join(''))\n      const code = node.compile()\n      setResult({ value: code.evaluate(), error: null })\n    } catch (err) {\n      setResult({ value: null, error: err.message })\n    }\n  }, [expression])\n\n  const testInput = value => RegExp(/^[+-]?\\d+(\\.\\d+)?$/).test(value)\n\n  const onDelete = (i) => {\n    const newExpression = expression.slice(0)\n    newExpression.splice(i, 1)\n    setExpression(newExpression)\n  }\n\n  const onAddition = (tag) => {\n    const value = tag.name.trim()\n\n    if (tag.id || testInput(value)) {\n      setExpression([...expression, { ...tag, name: value }])\n    } else {\n      setResult({ value: null, error: `\"${value}\" input is not allowed. Numbers (integers/floats) only.` })\n    }\n  }\n\n  const onSelectPredefined = (predefinedArray) => (e) => {\n    const suggestedValue = predefinedArray.find(item => String(item.id) === String(e.target.value))\n    if (suggestedValue) {\n      onAddition(suggestedValue)\n    }\n    expressionInput?.current?.input?.current?.input?.current?.focus()\n  }\n\n  const expressionValueComponent = ({ tag, removeButtonText, onDelete }) => {\n    return (\n      <button type='button' className=\"react-tags__selected-tag\">\n        {tag.name}\n      </button>\n    )\n  }\n\n  const onInput = (inputQuery) => {\n    const query = inputQuery.trim()\n    const operation = AUTOCOMPLETION.find(item => query.includes(item.name))\n    if (operation) {\n      const number = query.replace(operation.name, '').trim()\n      if (operation.name.length === query.length) {\n        setExpression([...expression, operation])\n      } else if (testInput(number)) {\n        setExpression([...expression, { name: number }, operation])\n      } else {\n        setResult({ value: null, error: `\"${number}\" input is not allowed. Numbers (integers/floats) only.` })\n      }\n      // because this state change should happen after input state were set\n      setTimeout(() => {\n        expressionInput.current.clearInput()\n      }, 0)\n    }\n  }\n\n  return (\n    <div className=\"App-cont\">\n      <select\n        value=\"calculator\"\n        name=\"node_type\"\n        onChange={() => {}}\n      >\n        <option value=\"calculator\">Calculator</option>\n        <option value=\"router\">Router</option>\n      </select>\n      <br/>\n\n      <div>\n        <input value={dvInput.name} type=\"text\" placeholder=\"name\" onChange={(e) => {\n          setDvInput((prevState) => ({\n            ...prevState,\n            name: e.target.value\n          }))\n        }}/>\n        <input value={dvInput.value} type=\"text\" placeholder=\"value\" onChange={(e) => {\n          setDvInput((prevState) => ({\n            ...prevState,\n            value: e.target.value\n          }))\n        }}/>\n        <button onClick={() => {\n          setDynamicVariables((prevState) => (\n            [...prevState, {id: Date.now(), name: dvInput.name, defaultValue: dvInput.value}]\n          ))\n          setDvInput({name: '', value: ''})\n        }}>Add</button>\n      </div>\n      <br/>\n\n      <div>\n        <select\n          value=\"default\"\n          name=\"operations\"\n          onChange={onSelectPredefined(OPERATIONS)}\n        >\n          <option value=\"default\" disabled>Operations</option>\n          {\n            OPERATIONS.map((item) =>\n              <option key={item.id} value={item.id}>{item.name}</option>\n            )\n          }\n        </select>\n        {\n          dynamicVariables.length !== 0 && (\n            <select\n              value=\"default\"\n              name=\"variables\"\n              onChange={onSelectPredefined(dynamicVariables)}\n            >\n              <option value=\"default\" disabled>Variables</option>\n              {\n                dynamicVariables.map((item) =>\n                  <option key={item.id} value={item.id}>{item.name}</option>\n                )\n              }\n            </select>\n          )\n        }\n      </div>\n      <br/>\n\n      <ReactTags\n        allowNew\n        minQueryLength={1}\n        onAddition={onAddition}\n        onDelete={onDelete}\n        placeholderText=\"Typing an expression\"\n        ref={expressionInput}\n        suggestions={[...OPERATIONS, ...dynamicVariables]}\n        tags={expression}\n        tagComponent={expressionValueComponent}\n        onInput={onInput}\n      />\n      <br/>\n\n      <div>\n        {\n          result.error !== null && <b>Error: </b>\n        }\n        {\n          result.value !== null && <b>Result: </b>\n        }\n        {result.error || result.value}\n      </div>\n      <br/>\n\n      <div>\n        <b>Expression values:</b> <br/>\n        <ul>\n          {expression.map((item, index) => <li key={`${item.name + index}`}><code>{JSON.stringify(item)}</code></li>)}\n        </ul>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}