{"version":3,"sources":["App.js","logo.svg","reportWebVitals.js","index.js"],"names":["dynamicVariables","id","name","defaultValue","OPERATIONS","DEFAULT_SELECT","App","useState","expression","setExpression","error","setError","result","setResult","variables","setVariables","operationsSelect","setOperationsSelect","variablesSelect","setVariablesSelect","nodeType","useEffect","map","item","code","parse","join","compile","evaluate","message","setTimeout","expressionInput","useRef","onAddition","tag","RegExp","test","newExpression","concat","onChangeSuggested","suggestedArray","e","suggestedValue","find","String","target","value","current","input","focus","className","onChange","disabled","length","allowNew","minQueryLength","onDelete","i","slice","splice","placeholderText","ref","suggestions","tags","tagComponent","removeButtonText","type","index","JSON","stringify","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4baf92c6.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\nimport ReactTags from 'react-tag-autocomplete'\nimport { parse } from 'mathjs'\nimport logo from './logo.svg'\nimport './App.css'\n\nconst dynamicVariables = [\n  { id: 101, name: 'varText', defaultValue: 'Hello' },\n  { id: 102, name: 'varNumber', defaultValue: '10000' },\n  { id: 103, name: 'varPercentage', defaultValue: '33.3' },\n]\n\nconst OPERATIONS = [\n  { id: 1, name: '(' },\n  { id: 2, name: ')' },\n  { id: 3, name: '+' },\n  { id: 4, name: '-' },\n  { id: 5, name: '*' },\n  { id: 6, name: '/' },\n  { id: 7, name: '^' },\n  { id: 8, name: 'sqrt(' }\n]\n\nconst DEFAULT_SELECT = 'default'\n\nconst App = () => {\n  const [expression, setExpression] = useState([])\n  const [error, setError] = useState(null)\n  const [result, setResult] = useState(null)\n  const [variables, setVariables] = useState([])\n  const [operationsSelect, setOperationsSelect] = useState(DEFAULT_SELECT)\n  const [variablesSelect, setVariablesSelect] = useState('calcu;ator')\n  const [nodeType, setNodeType] = useState()\n\n  useEffect(() => {\n    const result = expression.map(item => item.defaultValue || item.name)\n    try {\n      const node = parse(result.join(''))\n      const code = node.compile()\n      setError(null)\n      setResult(code.evaluate())\n    } catch (error) {\n      setError(error.message)\n      setResult(null)\n    }\n  }, [expression])\n\n  useEffect(() => {\n    setTimeout(() => {\n      setVariables(dynamicVariables)\n    }, 5000)\n  }, [])\n\n  const expressionInput = useRef()\n\n  const onDelete = (i) => {\n    const newExpression = expression.slice(0)\n    newExpression.splice(i, 1)\n    setExpression(newExpression)\n  }\n\n  const onAddition = (tag) => {\n    if (tag.id || RegExp(/^[0-9]+$/).test(tag.name)) {\n      const newExpression = [].concat(expression, tag)\n      setExpression(newExpression)\n    } else {\n      setError(`\"${tag.name}\" input is not allowed. Numbers only.`)\n      setResult(null)\n    }\n  }\n\n  const onChangeSuggested = (suggestedArray) => (e) => {\n    const suggestedValue = suggestedArray.find(item => String(item.id) === String(e.target.value))\n    if (suggestedValue) {\n      onAddition(suggestedValue)\n    }\n    expressionInput.current.input.current.input.current.focus()\n    setOperationsSelect(DEFAULT_SELECT)\n    setVariablesSelect(DEFAULT_SELECT)\n    // console.log(expressionInput.current.input.current.input.current.focus()) //.container.focus()\n  }\n\n  return (\n    <header className=\"App-header\">\n      <br/>\n      <br/>\n      <select\n        value={nodeType}\n        name=\"node_type\">\n        <option value=\"calculator\">Calculator</option>\n        <option value=\"router\">Router</option>\n      </select>\n      <br/>\n      <div>\n        <select\n          value={operationsSelect}\n          name=\"operations\"\n          onChange={onChangeSuggested(OPERATIONS)}>\n          <option value=\"default\" disabled>Operations</option>\n          {\n            OPERATIONS.map((item) =>\n              <option key={item.id} value={item.id}>{item.name}</option>\n            )\n          }\n        </select>\n        {\n          !variables.length\n            ? <span> Loading Dynamic Variables...</span>\n            : <select\n              value={variablesSelect}\n              name=\"variables\"\n              onChange={onChangeSuggested(variables)}>\n              <option value=\"default\" disabled>Variables</option>\n              {\n                variables.map((item) =>\n                  <option key={item.id} value={item.id}>{item.name}</option>\n                )\n              }\n            </select>\n        }\n      </div>\n      <br/>\n\n      <ReactTags\n        allowNew\n        minQueryLength={1}\n        onAddition={onAddition}\n        onDelete={onDelete}\n        placeholderText=\"Typing an expression\"\n        ref={expressionInput}\n        suggestions={[...OPERATIONS, ...variables]}\n        tags={expression}\n        tagComponent={function TagComponent ({ tag, removeButtonText, onDelete }) {\n          return (\n            <button type='button' className=\"react-tags__selected-tag\">\n              {tag.name}\n            </button>\n          )\n        }}\n      />\n      <br/>\n\n      <div>\n        {\n          error !== null && <b>Error: </b>\n        }\n        {\n          result !== null && <b>Result: </b>\n        }\n        {error || result}\n      </div>\n      <br/>\n\n      <div>\n        <b>Expression values:</b> <br/>\n        <ul>\n          {expression.map((item, index) => <li key={`${item.name + index}`}><code>{JSON.stringify(item)}</code></li>)}\n        </ul>\n      </div>\n    </header>\n  )\n}\n\nexport default App\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}